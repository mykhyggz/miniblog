#!/usr/bin/perl
use Test::More; # tests=>1;

BEGIN {
use_ok( 'HTTP::Lite' );
use_ok( 'HTML::TokeParser::Simple');
use_ok( 'YAML' );
}

use strict;
use warnings;

my $cfg = YAML::LoadFile('testconf.yml') or die $!; 

my $url = $cfg->{base_url};
my $session_id ; # changes 

my $http = HTTP::Lite->new;
my $req = $http->request($url);
if ($req == 200){
    my $p = HTML::TokeParser::Simple->new(\$http->body());

TOP:
    while (my $t = $p->get_token){
        if ($t->is_tag('a')){
            if (my $h = $t->get_attr('href')){
                    $h = (split /\?/, $h)[1];
                    if ( ($session_id = $h)
                        =~ s/.*session_id=([a-f0-9]+)&.*/$1/){
    ok ($session_id, "got session_id: $session_id");
                    last TOP;
                }

            }
        }
    }
}

else {die $req, $!;}

$http->reset();

# set up password, then get logged in

$http->prepare_post({ 
    username=>'Admin',
    session_id=>$session_id,
    password => $ENV{miniblog_pass},
	});

$req = $http->request($url);
# set up admin password


if ($req == 200){ 
        my $ret=$http->body(); 

        my $p = HTML::TokeParser::Simple->new(\$ret);
ok($ret =~ /^.*>Congrats! Admin has a password! Redirecting to login\.{3}<.+$/, "admin password set");
}

else {die $req, $!;}

# login again 
# should keep post data?

$req = $http->request($url);

if ($req == 200){
my $p = HTML::TokeParser::Simple->new(\$http->body());


TOP:
while (my $t = $p->get_token){
    if ($t->is_tag('a')){
        if (my $h = $t->get_attr('href')){
                $h = (split /\?/, $h)[1];
                if ( ($session_id = $h) =~ s/.*session_id=([a-f0-9]+)&.*/$1/){
ok ($session_id, "got session_id: $session_id");
last TOP;
            }

        }
    }
}


}
print  "session id: ", $session_id, "\n";
# check content of admin page?

# make some content, now we're logged in

$http->reset();

for (1 .. 6){
    my $it = sprintf "%02d", $_ ;
    $http->prepare_post({
        session_id => $session_id,
        Author => 'Admin',
        Copy => "$it Tests. Are started!",
        Description => "Test Page $it",
        Title => "Test Title $it",
        action=>"Publish",
    });

    $req = $http->request($url);

    if ($req == 200){
        my $ret=$http->body();

        # grab yaml files for deletion later
#        print $http->status_message(), "\n";
        # each time should re-set last viewed and return 'default' of last viewed
        # dump page
        my $p = HTML::TokeParser::Simple->new(\$ret);
        while (my $t = $p->get_token){
#            if ($t->is_tag('p')){
                # TO DO: Collect filenames for deletion later
                print $t->as_is;
#            }
        }
    # sleep 1;
    }
}



done_testing();

# vim: paste:ai:ts=4:sw=4:sts=4:expandtab:ft=perl

