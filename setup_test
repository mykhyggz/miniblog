#!/usr/bin/perl
use Test::More; # tests=>1;

BEGIN {
use_ok( 'Net::SSH2' );
use_ok( 'HTTP::Lite' );
use_ok( 'YAML' );
use_ok( 'Fcntl' );
}

use strict;
use warnings;

my $config = YAML::LoadFile($ARGV[0]);

die unless $config->{app_path};

my ( $uid, $gid ) = undef; # will get these for "web_user" from remote system
# print join "\n", keys %$config;

my $ret = undef; # sink for channel data coming back

my $ssh = Net::SSH2->new();

=pod

Will need:
working virtual host with modperl alias

will create:
users_db_name.db
initial Admin page yaml file
site configuration yaml

edit to your liking, then run, "saveconf.pl" to configure this setup script

=cut

$ssh->connect($config->{ssh_host}) or die $!;
print "connecting\n\n";
# if you don't have publickey access, you'll have to change this whole bit 
if ($ssh->auth_publickey($config->{ssh_user},"$config->{pub_key}","$config->{priv_key}")){

    my $chan = $ssh->channel();

    my $sftp = $ssh->sftp();

# get the files from github
# only runs if /tmp doesn't contain the files
    unless ($sftp->stat("/tmp/miniblog")){

        $chan->exec("git clone git://github.com/mykhyggz/miniblog.git /tmp/miniblog"); 

        while (! $chan->eof()){ $chan->read($ret,16); print $ret; } 
        $chan->close; 
    }

# get webuser uid

    $chan = $ssh->channel();
    $chan->exec("id -u $config->{http_user}"); 
    while (! $chan->eof()){ $chan->read($ret,16); $uid .= $ret; } 
    chomp $uid;
    $chan->close; 
    $ret = undef;

# get webuser gid

    $chan = $ssh->channel();
    $chan->exec("id -g $config->{http_user}"); 
    while (! $chan->eof()){ $chan->read($ret,16); $gid .= $ret; } 
    chomp $gid;
    $chan->close; 
    $ret = undef;

    die "no uid/gid gotten" unless ((defined $uid) && (defined $gid));

print "webserver user:$uid group:$gid "; 

# check / make  folders
# TO DO: This isn't right, as the docroot folder could be owned by another ID
    my $docroot = $sftp->stat($config->{doc_root});
        warn $sftp->error(), ' doc_root: ', $! if $sftp->error();

ok ((($docroot->{gid} eq 0) && ($docroot->{uid} eq 0)), "docroot owners okay");

ok (((sprintf( "%04o", $docroot->{mode} & 07777)) eq '0755'), "mode okay");

    my $apppath = $sftp->stat($config->{app_path});
        warn $sftp->error(), ' app_path: ', $! if $sftp->error();

ok ((($apppath->{gid} eq 0) && ($apppath->{uid} eq 0)), "apppath owners okay");

ok (((sprintf( "%04o", $apppath->{mode} & 07777)) eq '0755'), "mode okay");

    my $dbpath_info = $sftp->stat($config->{db_path});
        warn $sftp->error(), " db_path: ", $! if $sftp->error();

# folder doesn't exist
    if ($sftp->error() eq 2 ){
        $sftp->mkdir($config->{db_path}, 0744);

        warn $sftp->error(), " can't make db_path: ", $! if $sftp->error();
    }

print "creating $config->{db_path}/$config->{db_name}\n";
    my $usersdb = $sftp->open(
        "$config->{db_path}/$config->{db_name}", O_CREAT,0644); 
        warn $sftp->error(), " : ", $! if $sftp->error();

# set up user table
    $ssh->scp_put("schema.sql", "/tmp/schema.sql");

print "setting up initial admin user\n";

    $chan = $ssh->channel();
    $chan->shell();
    print $chan "sqlite3 \"$config->{db_path}/$config->{db_name}\" </tmp/schema.sql";
    print $_ while <$chan>; 
    $chan->close; 

# fix perms to webuser so it can write the file
	$usersdb->setstat(uid=>$uid, gid=>$gid);

	$sftp->setstat("$config->{db_path}", uid=>$uid, gid=>$gid); 

	warn $sftp->error(), " : ", $! if $sftp->error();
	$dbpath_info = $sftp->stat($config->{db_path});

ok (($dbpath_info->{uid} eq $uid)&&($dbpath_info->{gid} eq $gid),
    "user and group is okay on dbpath");

# checking/making css folder and yaml post dump
    unless ($sftp->stat("$config->{doc_root}/$config->{css_url}")){
        $sftp->mkdir("$config->{doc_root}/$config->{css_url}"); 
        warn $sftp->error(), " css_url: ", $! if $sftp->error();
    }
    unless ($sftp->stat("$config->{yaml_path}")){
        $sftp->mkdir("$config->{yaml_path}"); 
        warn $sftp->error(), " yaml_path : ", $! if $sftp->error();
    }

print "setting initial admin note\n";

	YAML::DumpFile("/tmp/$config->{admin_page}",{
			author=>'Admin',
			copy=>'test admin page',
			datetime=>'1380225721',
			description=>'Admin Test Page',
			title=>'Admin Test Page',
            tags=>'',
		}) or die $!;

    $ssh->scp_put("/tmp/$config->{admin_page}",
        "$config->{yaml_path}/$config->{admin_page}");

	warn $ssh->error(), " : ", $! if $ssh->error();

# fix yaml owner to web user
	$sftp->setstat("$config->{yaml_path}/$config->{admin_page}",
		uid=>$uid, gid=>$gid); 

	warn $sftp->error(), " : ", $! if $sftp->error();

	$sftp->setstat("$config->{yaml_path}", uid=>$uid, gid=>$gid); 

	warn $sftp->error(), " : ", $! if $sftp->error();

# put files in place 

    $chan = $ssh->channel();
    $chan->shell();

    print $chan "cp /tmp/miniblog/*.css \"$config->{doc_root}/$config->{css_url}\"";

    print $chan "cp /tmp/miniblog/miniblog.pl \"$config->{app_path}\"";

    $chan->close; 

# drop config.yml in place
# app_path is removed, as other data
my $siteconf = {map {$_ => $config->{$_}} grep (! /ssh_user|ssh_host|pub_key|priv_key|http_user|doc_root|app_path/, (keys %$config))};

YAML::DumpFile('/tmp/siteconfig.yml',$siteconf) or die $!;

print "setting site configuration yaml\n";

$ssh->scp_put('/tmp/siteconfig.yml',"$config->{app_path}/siteconfig.yml");
    warn $ssh->error, ' putting siteconfig: ', $! if ($ssh->error);
# should this be writeable by the web server, or just hand-edited?
# if writeable, then we need to link to edit on the Admin landing page
	$sftp->setstat("$config->{app_path}/siteconfig.yml",
		uid=>$uid, gid=>$gid); 

    warn $sftp->error, ' putting siteconfig: ', $! if ($ssh->error);
}

else {
print "whoops, there's a problem getting you logged in...\n\n";
}

$ssh->disconnect();

done_testing();


# vim: paste:ai:ts=4:sw=4:sts=4:expandtab:ft=perl
